(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[55],{d202:function(e,t,n){"use strict";n.r(t),t["default"]='<template>\n  <div style="max-width: 800px; width: 100%;">\n    <q-splitter\n      v-model="splitterModel"\n      :limits="[30, 100]"\n      emit-immediately\n    >\n      <template v-slot:before>\n        <div style="overflow: auto">\n          <q-calendar\n            ref="calendar"\n            v-model="selectedDate"\n            view="month"\n            :disabled-before="disabledBefore"\n            :disabled-after="disabledAfter"\n            :mini-mode="miniMode"\n            :day-style="modifiedStyle"\n            locale="en-us"\n          />\n        </div>\n      </template>\n      <template v-slot:separator>\n        <q-avatar color="primary" text-color="white" size="40px" icon="drag_indicator" />\n      </template>\n      <template v-slot:after>\n        <div style="min-width: 20px"></div>\n      </template>\n    </q-splitter>\n  </div>\n</template>\n\n<script>\nimport {\n  parseDate,\n  parseTimestamp,\n  addToDate,\n  daysInMonth\n} from \'ui\' // ui is aliased from \'@quasar/quasar-ui-qcalendar\'\nconst CURRENT_DAY = new Date()\n\nfunction getCurrentDay (day) {\n  const newDay = new Date(CURRENT_DAY)\n  newDay.setDate(day)\n  const tm = parseDate(newDay)\n  return tm.date\n}\n\nexport default {\n  data () {\n    return {\n      selectedDate: \'\',\n      splitterModel: 90, // start at 90%\n      miniMode: false\n    }\n  },\n  watch: {\n    splitterModel (val) {\n      const rect = this.$refs.calendar.$el.getBoundingClientRect()\n      this.miniMode = rect.width < 500\n    }\n  },\n  beforeMount () {\n    // set to today\'s date\n    this.selectedDate = getCurrentDay(CURRENT_DAY.getDate())\n  },\n  computed: {\n    disabledBefore () {\n      // find the last day of the previous month\n      if (this.selectedDate) {\n        let ts = parseTimestamp(this.selectedDate)\n        ts = addToDate(ts, { day: -ts.day })\n        return ts.date\n      }\n      return void 0\n    },\n\n    disabledAfter () {\n      // find the 1st day of the next month\n      if (this.selectedDate) {\n        let ts = parseTimestamp(this.selectedDate)\n        // get days in month\n        const days = daysInMonth(ts.year, ts.month)\n        ts = addToDate(ts, { day: (days - ts.day) })\n        return ts.date\n      }\n      return void 0\n    }\n  },\n  methods: {\n    modifiedStyle (scope) {\n      if (scope.disabled === true) {\n        return {\n          backgroundColor: \'#ffcb9c!important\',\n          cursor: \'not-allowed\'\n        }\n      }\n      return {}\n    }\n  }\n}\n<\/script>\n'}}]);