(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["2d217716"],{c76b:function(e,n,t){"use strict";t.r(n),n["default"]="<template>\n  <div style=\"max-width: 800px; width: 100%;\">\n    <q-splitter\n      v-model=\"splitterModel\"\n      :limits=\"[30, 100]\"\n      emit-immediately\n    >\n      <template v-slot:before>\n        <q-calendar\n          ref=\"calendar\"\n          v-model=\"selectedDate\"\n          view=\"month\"\n          locale=\"en-us\"\n          :mini-mode=\"miniMode\"\n        >\n          <template #day=\"{ date, miniMode }\">\n            <template v-for=\"(event, index) in getEvents(date)\">\n              <template v-if=\"miniMode\">\n                <q-badge\n                  :key=\"index\"\n                  style=\"width: 5px; max-width: 5px; height: 5px; max-height: 5px\"\n                  class=\"q-ma-xs q-event\"\n                  :class=\"badgeClasses(event, 'day')\"\n                  :style=\"badgeStyles(event, 'day')\"\n                ></q-badge>\n              </template>\n              <template v-else>\n                <q-badge\n                  :key=\"index\"\n                  style=\"width: 100%; cursor: pointer; height: 16px; max-height: 16px\"\n                  class=\"q-mb-xs q-event\"\n                  :class=\"badgeClasses(event, 'day')\"\n                  :style=\"badgeStyles(event, 'day')\"\n                >\n                  <q-icon v-if=\"event.icon\" :name=\"event.icon\" class=\"q-mr-xs\"></q-icon><span class=\"ellipsis\">{{ event.title }}</span>\n                </q-badge>\n              </template>\n            </template>\n          </template>\n        </q-calendar>\n      </template>\n      <template v-slot:separator>\n        <q-avatar color=\"primary\" text-color=\"white\" size=\"40px\" icon=\"drag_indicator\" />\n      </template>\n      <template v-slot:after>\n        <div style=\"min-width: 20px\"></div>\n      </template>\n    </q-splitter>\n  </div>\n</template>\n\n<script>\nimport { date, colors } from 'quasar'\n\nimport {\n  parseDate,\n  makeDateTime,\n  parsed\n} from 'ui' // ui is aliased from '@quasar/quasar-ui-qcalendar'\n\nconst CURRENT_DAY = new Date()\n\nfunction getCurrentDay (day) {\n  const newDay = new Date(CURRENT_DAY)\n  newDay.setDate(day)\n  const tm = parseDate(newDay)\n  return tm.date\n}\n\nexport default {\n  data () {\n    return {\n      splitterModel: 90, // start at 90%\n      selectedDate: '',\n      miniMode: false,\n      events: [\n        {\n          title: '1st of the Month',\n          details: 'Everything is funny as long as it is happening to someone else',\n          date: getCurrentDay(1),\n          bgcolor: 'orange'\n        },\n        {\n          title: 'Sisters Birthday',\n          details: 'Buy a nice present',\n          date: getCurrentDay(4),\n          bgcolor: 'green',\n          icon: 'fas fa-birthday-cake'\n        },\n        {\n          title: 'Meeting',\n          details: 'Time to pitch my idea to the company',\n          date: getCurrentDay(8),\n          time: '10:00',\n          duration: 120,\n          bgcolor: 'red',\n          icon: 'fas fa-handshake'\n        },\n        {\n          title: 'Lunch',\n          details: 'Company is paying!',\n          date: getCurrentDay(8),\n          time: '11:30',\n          duration: 90,\n          bgcolor: 'teal',\n          icon: 'fas fa-hamburger'\n        },\n        {\n          title: 'Visit mom',\n          details: 'Always a nice chat with mom',\n          date: getCurrentDay(20),\n          time: '17:00',\n          duration: 90,\n          bgcolor: 'blue-grey',\n          icon: 'fas fa-car'\n        },\n        {\n          title: 'Conference',\n          details: 'Teaching Javascript 101',\n          date: getCurrentDay(22),\n          time: '08:00',\n          duration: 540,\n          bgcolor: 'blue',\n          icon: 'fas fa-chalkboard-teacher'\n        },\n        {\n          title: 'Girlfriend',\n          details: 'Meet GF for dinner at Swanky Restaurant',\n          date: getCurrentDay(22),\n          time: '19:00',\n          duration: 180,\n          bgcolor: 'teal',\n          icon: 'fas fa-utensils'\n        },\n        {\n          title: 'Fishing',\n          details: 'Time for some weekend R&R',\n          date: getCurrentDay(27),\n          bgcolor: 'purple',\n          icon: 'fas fa-fish',\n          days: 2\n        },\n        {\n          title: 'Vacation',\n          details: 'Trails and hikes, going camping! Don\\'t forget to bring bear spray!',\n          date: getCurrentDay(29),\n          bgcolor: 'purple',\n          icon: 'fas fa-plane',\n          days: 5\n        }\n      ]\n    }\n  },\n  watch: {\n    splitterModel (val) {\n      const rect = this.$refs.calendar.$el.getBoundingClientRect()\n      this.miniMode = rect.width < 500\n    }\n  },\n  methods: {\n    isCssColor (color) {\n      return !!color && !!color.match(/^(#|(rgb|hsl)a?\\()/)\n    },\n\n    badgeClasses (event, type) {\n      const cssColor = this.isCssColor(event.bgcolor)\n      const isHeader = type === 'header'\n      return {\n        [`text-white bg-${event.bgcolor}`]: !cssColor,\n        'full-width': !isHeader && (!event.side || event.side === 'full'),\n        'left-side': !isHeader && event.side === 'left',\n        'right-side': !isHeader && event.side === 'right'\n      }\n    },\n\n    badgeStyles (event, type, timeStartPos, timeDurationHeight) {\n      const s = {}\n      if (this.isCssColor(event.bgcolor)) {\n        s['background-color'] = event.bgcolor\n        s.color = colors.luminosity(event.bgcolor) > 0.5 ? 'black' : 'white'\n      }\n      if (timeStartPos) {\n        s.top = timeStartPos(event.time) + 'px'\n      }\n      if (timeDurationHeight) {\n        s.height = timeDurationHeight(event.duration) + 'px'\n      }\n      s['align-items'] = 'flex-start'\n      return s\n    },\n\n    getEvents (dt) {\n      const events = []\n      for (let i = 0; i < this.events.length; ++i) {\n        let added = false\n        if (this.events[i].date === dt) {\n          if (this.events[i].time) {\n            if (events.length > 0) {\n              // check for overlapping times\n              const startTime = makeDateTime(parsed(this.events[i].date + ' ' + this.events[i].time))\n              const endTime = date.addToDate(startTime, { minutes: this.events[i].duration })\n              for (let j = 0; j < events.length; ++j) {\n                const startTime2 = makeDateTime(parsed(events[j].date + ' ' + events[j].time))\n                const endTime2 = date.addToDate(startTime2, { minutes: events[j].duration })\n                if (date.isBetweenDates(startTime, startTime2, endTime2) || date.isBetweenDates(endTime, startTime2, endTime2)) {\n                  events[j].side = 'left'\n                  this.events[i].side = 'right'\n                  events.push(this.events[i])\n                  added = true\n                  break\n                }\n              }\n            }\n          }\n          if (!added) {\n            this.events[i].side = void 0\n            events.push(this.events[i])\n          }\n        } else if (this.events[i].days) {\n          // check for overlapping dates\n          const startDate = makeDateTime(parsed(this.events[i].date))\n          const endDate = date.addToDate(startDate, { days: this.events[i].days })\n          if (date.isBetweenDates(dt, startDate, endDate)) {\n            events.push(this.events[i])\n            added = true\n          }\n        }\n      }\n      return events\n    }\n  }\n}\n<\/script>\n"}}]);